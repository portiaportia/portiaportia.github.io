#!/usr/bin/env node

/* Load modules */
var fs  = require('fs');
var path = require('path');
var url = require('url');
var http = require('http');
var mime = require('mime');

/* Load package.json */
var package = JSON.parse(fs.readFileSync(__dirname + '/../package.json'));

/* Define constants */
var VERSION = package.version;
var DEFAULT_DIR = '.';
var DEFAULT_PORT = 3000;

var USAGE = ''
  + 'Usage: publicjs [options] [dir="' + DEFAULT_DIR + '"] [port="' + DEFAULT_PORT + '"]\n'
  + '\n'
  + 'Options:\n'
  + '\t-v, --version\tShow version number\n'
  + '\t-h, --help\tShow this help message\n'
;

/* Define functions */

// Successful end
function success(msg) {
  console.log(msg);
  process.exit(0);
}

// Abnormal end
function error(msg) {
  console.error(msg);
  process.exit(1);
}

/* Parse arguments */
var args = process.argv.slice(2);
var dir = DEFAULT_DIR;
var port = DEFAULT_PORT;
switch (args[0]) {
  case '-h':
  case '--help':
    success(USAGE);
    break;
  case '-v':
  case '--version':
    success(VERSION);
    break;
  default:
    // publicjs dir port
    if (args.length >= 2) {
      dir = args[0];
      if (isFinite(args[1])) {
        port = args[1];
      }
    } else if (args.length == 1) {
      // publicjs port
      if (isFinite(args[0])) {
        port = args[0];
      // publicjs dir
      } else {
        dir = args[0];
      }
    }
}
var root = path.resolve(dir);

function escapeHTML(text) {
  return text.replace(/&/g, '&amp;')
             .replace(/</g, '&lt;')
             .replace(/>/g, '&gt;')
             .replace(/"/g, '&quot;')
             .replace(/'/g, '&#039;');
}

function unescapeHTML(text) {
  return text.replace(/&amp;/g, '&')
             .replace(/&lt;/g, '<')
             .replace(/&gt;/g, '>')
             .replace(/&quot;/g, '"')
             .replace(/&#039;/g, "'");
}


if (path) {
  http.createServer(function(req, res) {
    var pathname = url.parse(req.url).pathname;
    var decoded = decodeURIComponent(pathname);
    var filePath = path.join(dir, unescapeHTML(decoded)); // Real file path
    var base = filePath.replace(dir, ''); // Base path for browser link
    var abs = path.resolve(filePath); 
    console.log(new Date().toString(), abs);

    if (abs.indexOf(root) !== 0) {
      res.writeHead(403, { 'Content-Type': 'text/plain' });
      res.end('Forbidden\n');
      return;
    }

    fs.readFile(filePath, function(err, data) {
      if (err) {
        res.writeHead(200, { 'Content-Type': 'text/html' });
        // Index files if 404 or directory
        if ([2, 21, 28, -1, -21].indexOf(err.errno) < 0) {
          res.write(['<h1>', res.message, '</h1>'].join(''));
          res.end(['<pre>', JSON.stringify(err, null, '  '), '</pre>'].join(''));
          return;
        } else {
          if (err.errno == 2) { // 404
            filePath = path.dirname(filePath);
          }
          fs.readdir(filePath, function(err, files) {
            if (err) {
              res.write(['<h1>', res.message, '</h1>'].join(''));
              res.end(['<pre>', JSON.stringify(err, null, '  '), '</pre>'].join(''));
              return;
            }
            var list = ['<ul>'];
            files.unshift('..');
            files.forEach(function(file) {
              list.push('<li><a href="', path.join(base, escapeHTML(file)),'">', escapeHTML(file), '</a></li>');
            });
            list.push('</ul>');
            res.write(['<h1>', 'Index of "', abs, '"</h1>'].join(''));
            res.end(list.join('\n'));
          });
        }
        return;
      }
      res.writeHead(200, { 'Content-Type': mime.getType(filePath) });
      res.end(data);
    });
  }).listen(port, function() {
    console.log('Public.js server running with "' + path.resolve(dir) + '" on port ' + port);
  });
} else {
  error(USAGE);
}
